// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/mensaje.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnviarClient is the client API for Enviar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnviarClient interface {
	Enviar_Continente(ctx context.Context, in *Continente, opts ...grpc.CallOption) (*ResponderTodo, error)
	RegistrarEn_Datanode(ctx context.Context, in *RegistroDatanode, opts ...grpc.CallOption) (*ResponderTodo, error)
	ConsultarPor_Id(ctx context.Context, in *ConsultaId, opts ...grpc.CallOption) (*RespuestaId, error)
	ConsultarPor_Estado(ctx context.Context, in *ConsultaEstado, opts ...grpc.CallOption) (*RespuestaEstado, error)
}

type enviarClient struct {
	cc grpc.ClientConnInterface
}

func NewEnviarClient(cc grpc.ClientConnInterface) EnviarClient {
	return &enviarClient{cc}
}

func (c *enviarClient) Enviar_Continente(ctx context.Context, in *Continente, opts ...grpc.CallOption) (*ResponderTodo, error) {
	out := new(ResponderTodo)
	err := c.cc.Invoke(ctx, "/grpc.Enviar/Enviar_Continente", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enviarClient) RegistrarEn_Datanode(ctx context.Context, in *RegistroDatanode, opts ...grpc.CallOption) (*ResponderTodo, error) {
	out := new(ResponderTodo)
	err := c.cc.Invoke(ctx, "/grpc.Enviar/Registrar_en_Datanode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enviarClient) ConsultarPor_Id(ctx context.Context, in *ConsultaId, opts ...grpc.CallOption) (*RespuestaId, error) {
	out := new(RespuestaId)
	err := c.cc.Invoke(ctx, "/grpc.Enviar/Consultar_por_Id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enviarClient) ConsultarPor_Estado(ctx context.Context, in *ConsultaEstado, opts ...grpc.CallOption) (*RespuestaEstado, error) {
	out := new(RespuestaEstado)
	err := c.cc.Invoke(ctx, "/grpc.Enviar/Consultar_por_Estado", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnviarServer is the server API for Enviar service.
// All implementations must embed UnimplementedEnviarServer
// for forward compatibility
type EnviarServer interface {
	Enviar_Continente(context.Context, *Continente) (*ResponderTodo, error)
	RegistrarEn_Datanode(context.Context, *RegistroDatanode) (*ResponderTodo, error)
	ConsultarPor_Id(context.Context, *ConsultaId) (*RespuestaId, error)
	ConsultarPor_Estado(context.Context, *ConsultaEstado) (*RespuestaEstado, error)
	mustEmbedUnimplementedEnviarServer()
}

// UnimplementedEnviarServer must be embedded to have forward compatible implementations.
type UnimplementedEnviarServer struct {
}

func (UnimplementedEnviarServer) Enviar_Continente(context.Context, *Continente) (*ResponderTodo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enviar_Continente not implemented")
}
func (UnimplementedEnviarServer) RegistrarEn_Datanode(context.Context, *RegistroDatanode) (*ResponderTodo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarEn_Datanode not implemented")
}
func (UnimplementedEnviarServer) ConsultarPor_Id(context.Context, *ConsultaId) (*RespuestaId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarPor_Id not implemented")
}
func (UnimplementedEnviarServer) ConsultarPor_Estado(context.Context, *ConsultaEstado) (*RespuestaEstado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarPor_Estado not implemented")
}
func (UnimplementedEnviarServer) mustEmbedUnimplementedEnviarServer() {}

// UnsafeEnviarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnviarServer will
// result in compilation errors.
type UnsafeEnviarServer interface {
	mustEmbedUnimplementedEnviarServer()
}

func RegisterEnviarServer(s grpc.ServiceRegistrar, srv EnviarServer) {
	s.RegisterService(&Enviar_ServiceDesc, srv)
}

func _Enviar_Enviar_Continente_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Continente)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarServer).Enviar_Continente(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Enviar/Enviar_Continente",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarServer).Enviar_Continente(ctx, req.(*Continente))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enviar_RegistrarEn_Datanode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistroDatanode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarServer).RegistrarEn_Datanode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Enviar/Registrar_en_Datanode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarServer).RegistrarEn_Datanode(ctx, req.(*RegistroDatanode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enviar_ConsultarPor_Id_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultaId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarServer).ConsultarPor_Id(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Enviar/Consultar_por_Id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarServer).ConsultarPor_Id(ctx, req.(*ConsultaId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Enviar_ConsultarPor_Estado_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsultaEstado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnviarServer).ConsultarPor_Estado(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Enviar/Consultar_por_Estado",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnviarServer).ConsultarPor_Estado(ctx, req.(*ConsultaEstado))
	}
	return interceptor(ctx, in, info, handler)
}

// Enviar_ServiceDesc is the grpc.ServiceDesc for Enviar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Enviar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Enviar",
	HandlerType: (*EnviarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enviar_Continente",
			Handler:    _Enviar_Enviar_Continente_Handler,
		},
		{
			MethodName: "Registrar_en_Datanode",
			Handler:    _Enviar_RegistrarEn_Datanode_Handler,
		},
		{
			MethodName: "Consultar_por_Id",
			Handler:    _Enviar_ConsultarPor_Id_Handler,
		},
		{
			MethodName: "Consultar_por_Estado",
			Handler:    _Enviar_ConsultarPor_Estado_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mensaje.proto",
}
